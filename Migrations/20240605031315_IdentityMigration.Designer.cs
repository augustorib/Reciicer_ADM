// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reciicer.Data;

#nullable disable

namespace Reciicer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240605031315_IdentityMigration")]
    partial class IdentityMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NivelId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PontuacaoTotal")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NivelId");

                    b.ToTable("Cliente");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CPF = "48906785062",
                            Email = "jurandir@gmail.com",
                            NivelId = 3,
                            Nome = "Jurandir",
                            PontuacaoTotal = 0,
                            Telefone = "(85)98792-0782"
                        },
                        new
                        {
                            Id = 2,
                            CPF = "48517494067",
                            Email = "judit@gmail.com",
                            NivelId = 2,
                            Nome = "Judit",
                            PontuacaoTotal = 0,
                            Telefone = "(69)99727-2310"
                        },
                        new
                        {
                            Id = 3,
                            CPF = "71134549504",
                            Email = "astolfo@gmail.com",
                            NivelId = 4,
                            Nome = "Astolfo",
                            PontuacaoTotal = 0,
                            Telefone = "(92)98308-7102"
                        });
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Material");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Descricao = "Plástico",
                            Nome = "Plástico"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            Descricao = "Papel",
                            Nome = "Papel"
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            Descricao = "Vidro",
                            Nome = "Vidro"
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            Descricao = "Metal",
                            Nome = "Metal"
                        });
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Material_Reciclagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Peso")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int>("ReciclagemId")
                        .HasColumnType("int");

                    b.Property<int>("TipoMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ReciclagemId");

                    b.HasIndex("TipoMaterialId");

                    b.ToTable("Material_Reciclagem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaterialId = 2,
                            Peso = 5,
                            Quantidade = 0,
                            ReciclagemId = 1,
                            TipoMaterialId = 2
                        });
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Nivel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PontosPerdaFrequencia")
                        .HasColumnType("int");

                    b.Property<int>("PontuacaoNecessario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Nivel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Iniciante",
                            PontosPerdaFrequencia = 0,
                            PontuacaoNecessario = 0
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Básico",
                            PontosPerdaFrequencia = 2,
                            PontuacaoNecessario = 10
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Intermediário",
                            PontosPerdaFrequencia = 10,
                            PontuacaoNecessario = 50
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Avançado",
                            PontosPerdaFrequencia = 20,
                            PontuacaoNecessario = 200
                        });
                });

            modelBuilder.Entity("Reciicer.Models.Entities.PontuacaoMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PontuacaoPeso")
                        .HasColumnType("int");

                    b.Property<int>("PontuacaoUnidade")
                        .HasColumnType("int");

                    b.Property<int>("TipoMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoMaterialId")
                        .IsUnique();

                    b.ToTable("PontuacaoMaterial");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PontuacaoPeso = 20,
                            PontuacaoUnidade = 2,
                            TipoMaterialId = 2
                        },
                        new
                        {
                            Id = 2,
                            PontuacaoPeso = 100,
                            PontuacaoUnidade = 10,
                            TipoMaterialId = 4
                        },
                        new
                        {
                            Id = 3,
                            PontuacaoPeso = 50,
                            PontuacaoUnidade = 5,
                            TipoMaterialId = 1
                        });
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Premiacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NivelId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NivelId")
                        .IsUnique();

                    b.ToTable("Premiacao");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Descricao = "Desconto de 10% na compra",
                            NivelId = 2,
                            Nome = "Desconto 10%"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            Descricao = "Sorteio do carro Fiat",
                            NivelId = 4,
                            Nome = "Sorteio Carro"
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            Descricao = "Ingresso para ver Vingadores",
                            NivelId = 3,
                            Nome = "Ingresso Cinema"
                        });
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Reciclagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataOperacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("PontuacaoGanha")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Reciclagem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteId = 1,
                            DataOperacao = new DateTime(2024, 6, 5, 0, 13, 14, 204, DateTimeKind.Local).AddTicks(5668),
                            PontuacaoGanha = 10
                        },
                        new
                        {
                            Id = 2,
                            ClienteId = 1,
                            DataOperacao = new DateTime(2024, 6, 5, 0, 13, 14, 204, DateTimeKind.Local).AddTicks(5679),
                            PontuacaoGanha = 5
                        });
                });

            modelBuilder.Entity("Reciicer.Models.Entities.TipoMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TempoDegradacao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("TipoMaterial");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Papelão",
                            MaterialId = 2,
                            Nome = "Papelão",
                            TempoDegradacao = 162000
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Papel de presente",
                            MaterialId = 2,
                            Nome = "Papel Presente",
                            TempoDegradacao = 150
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Garrafa PET - Polietileno Tereftalato",
                            MaterialId = 1,
                            Nome = "PET",
                            TempoDegradacao = 18000
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Copo de Vidro",
                            MaterialId = 3,
                            Nome = "Copo",
                            TempoDegradacao = 1000000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Cliente", b =>
                {
                    b.HasOne("Reciicer.Models.Entities.Nivel", "Nivel")
                        .WithMany("Clientes")
                        .HasForeignKey("NivelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nivel");
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Material_Reciclagem", b =>
                {
                    b.HasOne("Reciicer.Models.Entities.Material", "Material")
                        .WithMany("Material_Reciclagems")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reciicer.Models.Entities.Reciclagem", "Reciclagem")
                        .WithMany("Material_Reciclagems")
                        .HasForeignKey("ReciclagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reciicer.Models.Entities.TipoMaterial", "TipoMaterial")
                        .WithMany("Material_Reciclagem")
                        .HasForeignKey("TipoMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Reciclagem");

                    b.Navigation("TipoMaterial");
                });

            modelBuilder.Entity("Reciicer.Models.Entities.PontuacaoMaterial", b =>
                {
                    b.HasOne("Reciicer.Models.Entities.TipoMaterial", "TipoMaterial")
                        .WithOne("PontuacaoMaterial")
                        .HasForeignKey("Reciicer.Models.Entities.PontuacaoMaterial", "TipoMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoMaterial");
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Premiacao", b =>
                {
                    b.HasOne("Reciicer.Models.Entities.Nivel", "Nivel")
                        .WithOne("Premiacao")
                        .HasForeignKey("Reciicer.Models.Entities.Premiacao", "NivelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nivel");
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Reciclagem", b =>
                {
                    b.HasOne("Reciicer.Models.Entities.Cliente", "Cliente")
                        .WithMany("Reciclagems")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Reciicer.Models.Entities.TipoMaterial", b =>
                {
                    b.HasOne("Reciicer.Models.Entities.Material", "Material")
                        .WithMany("TipoMateriais")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Cliente", b =>
                {
                    b.Navigation("Reciclagems");
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Material", b =>
                {
                    b.Navigation("Material_Reciclagems");

                    b.Navigation("TipoMateriais");
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Nivel", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Premiacao")
                        .IsRequired();
                });

            modelBuilder.Entity("Reciicer.Models.Entities.Reciclagem", b =>
                {
                    b.Navigation("Material_Reciclagems");
                });

            modelBuilder.Entity("Reciicer.Models.Entities.TipoMaterial", b =>
                {
                    b.Navigation("Material_Reciclagem");

                    b.Navigation("PontuacaoMaterial");
                });
#pragma warning restore 612, 618
        }
    }
}
